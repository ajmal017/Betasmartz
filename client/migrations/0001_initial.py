# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import migrations, models
import phonenumber_field.modelfields
import client.models
import jsonfield.fields
import django.db.models.deletion
import django.core.validators
from django.conf import settings


class Migration(migrations.Migration):

    dependencies = [
        ('address', '0004_auto_20170125_0046'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('portfolios', '0001_initial'),
        ('advisor', '0001_initial'),
        ('multi_sites', '0003_auto_20170513_0344'),
    ]

    operations = [
        migrations.CreateModel(
            name='AccountBeneficiary',
            fields=[
                ('id', models.AutoField(serialize=False, verbose_name='ID', primary_key=True, auto_created=True)),
                ('type', models.IntegerField(null=True, choices=[(0, 'Primary'), (1, 'Contingent')])),
                ('name', models.CharField(max_length=255)),
                ('relationship', models.IntegerField(null=True, choices=[(0, 'Legal entity (e.g. charity)'), (1, 'Family member/friend'), (2, 'Spouse'), (3, 'My estate')])),
                ('birthdate', models.DateField()),
                ('share', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
            ],
        ),
        migrations.CreateModel(
            name='AccountTypeRiskProfileGroup',
            fields=[
                ('id', models.AutoField(serialize=False, verbose_name='ID', primary_key=True, auto_created=True)),
                ('account_type', models.IntegerField(choices=[(0, 'Personal Account'), (1, 'Joint Account'), (2, 'Trust Account'), (24, 'Investment Club Account'), (25, 'Partnership/Limited partnership Account'), (26, 'Sole Proprietor Account'), (27, 'Limited Liability Company Account'), (28, 'Association Account'), (29, 'Non-corporate organization Account'), (30, 'Pension Account'), (5, '401K Account'), (38, '401A Account'), (6, 'Roth 401K Account'), (7, 'Individual Retirement Account (IRA)'), (8, 'Roth IRA'), (9, 'SEP IRA'), (10, '403K Account'), (11, 'SIMPLE IRA Account (Savings Incentive Match Plans for Employees)'), (12, 'SARSEP Account (Salary Reduction Simplified Employee Pension)'), (13, 'Payroll Deduction IRA Account'), (14, 'Profit-Sharing Account'), (16, 'Money Purchase Account'), (17, 'Employee Stock Ownership Account (ESOP)'), (18, 'Governmental Account'), (19, '457 Account'), (20, '409A Nonqualified Deferred Compensation Account'), (21, '403B Account'), (31, 'Health Savings Account'), (32, '529 college savings plans Account'), (33, 'Coverdell Educational Savings Account (ESA) Account'), (34, 'UGMA/UTMA Account'), (35, 'Guardianship of the Estate Account'), (36, 'Custodial Account'), (37, 'Thrift Savings Account'), (39, 'Qualified Annuity Plan'), (40, 'Tax Deferred Annuity Plan'), (41, 'Qualified Nonprofit Plan'), (42, 'Qualified Nonprofit Roth Plan'), (43, 'Private 457 Plan'), (44, 'Individual 401k Account'), (45, 'Individual 401k Roth Account'), (46, 'Variable Annuity'), (47, 'Single Life Annuity'), (48, 'Joint & Survivor Annuity')], unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='APEXAccount',
            fields=[
                ('id', models.AutoField(serialize=False, verbose_name='ID', primary_key=True, auto_created=True)),
                ('apex_account', models.CharField(max_length=32)),
            ],
        ),
        migrations.CreateModel(
            name='AssetFee',
            fields=[
                ('id', models.AutoField(serialize=False, verbose_name='ID', primary_key=True, auto_created=True)),
                ('name', models.CharField(max_length=127)),
                ('applied_per', models.IntegerField(choices=[(0, 'Day End'), (1, 'Complete Day'), (2, 'Month End'), (3, 'Complete Month'), (4, 'Fiscal Month End'), (5, 'Entry Order'), (6, 'Entry Order Item'), (7, 'Exit Order'), (8, 'Exit Order Item'), (9, 'Transaction')])),
                ('fixed_level_unit', models.IntegerField(choices=[(0, 'Asset Value'), (1, 'Asset Qty'), (2, 'NAV Performance')])),
                ('fixed_level_type', models.IntegerField(choices=[(0, 'Add'), (1, 'Replace')])),
                ('fixed_levels', models.TextField(help_text="List of level transition points and the new values after that transition. Eg. '0: 0.001, 10000: 0.0'")),
                ('prop_level_unit', models.IntegerField(choices=[(0, 'Asset Value'), (1, 'Asset Qty'), (2, 'NAV Performance')])),
                ('prop_apply_unit', models.IntegerField(choices=[(0, 'Asset Value'), (1, 'Asset Qty'), (2, 'NAV Performance')])),
                ('prop_level_type', models.IntegerField(choices=[(0, 'Add'), (1, 'Replace')])),
                ('prop_levels', models.TextField(help_text="List of level transition points and the new values after that transition. Eg. '0: 0.001, 10000: 0.0'")),
                ('asset', models.ForeignKey(to='portfolios.Ticker')),
                ('collector', models.ForeignKey(to='multi_sites.Company')),
            ],
        ),
        migrations.CreateModel(
            name='AssetFeePlan',
            fields=[
                ('id', models.AutoField(serialize=False, verbose_name='ID', primary_key=True, auto_created=True)),
                ('name', models.CharField(max_length=127, unique=True)),
                ('description', models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.AutoField(serialize=False, verbose_name='ID', primary_key=True, auto_created=True)),
                ('date_of_birth', models.DateField(verbose_name='Date of birth', null=True)),
                ('gender', models.CharField(default='Male', max_length=20, choices=[('Male', 'Male'), ('Female', 'Female')])),
                ('phone_num', phonenumber_field.modelfields.PhoneNumberField(null=True, max_length=30)),
                ('civil_status', models.IntegerField(null=True, choices=[(0, 'Single'), (1, 'Married Filing Jointly'), (2, 'Married Filing Separately (lived with spouse)'), (3, "Married Filing Separately (didn't live with spouse)"), (4, 'Head of Household'), (5, 'Qualifying Widow(er)')])),
                ('regional_data', jsonfield.fields.JSONField(default=dict, blank=True)),
                ('geolocation_lock', models.CharField(max_length=30, blank=True)),
                ('is_accepted', models.BooleanField(default=False)),
                ('confirmation_key', models.CharField(editable=False, null=True, blank=True, max_length=36)),
                ('is_confirmed', models.BooleanField(default=False)),
                ('create_date', models.DateTimeField(auto_now_add=True)),
                ('client_agreement', models.FileField(upload_to='')),
                ('employment_status', models.IntegerField(null=True, blank=True, choices=[(0, 'Employed'), (1, 'Unemployed'), (2, 'Self-employed'), (3, 'Retired'), (4, 'Not in labor force')])),
                ('income', models.FloatField(verbose_name='Income ($)', default=0)),
                ('occupation', models.CharField(null=True, blank=True, max_length=20, choices=[('11-0000', 'Management'), ('13-0000', 'Business and Financial Operations'), ('15-0000', 'Computer and Mathematical'), ('17-0000', 'Architecture and Engineering'), ('19-0000', 'Life, Physical, and Social Science'), ('21-0000', 'Community and Social Services'), ('23-0000', 'Legal'), ('25-0000', 'Education, Training, and Library'), ('27-0000', 'Arts, Design, Entertainment, Sports, and Media'), ('29-0000', 'Healthcare Practitioners and Technical'), ('31-0000', 'Healthcare Support'), ('33-0000', 'Protective Service'), ('35-0000', 'Food Preparation and Serving Related'), ('37-0000', 'Building and Grounds Cleaning and Maintenance'), ('39-0000', 'Personal Care and Service'), ('41-0000', 'Sales and Related'), ('43-0000', 'Office and Administrative Support'), ('45-0000', 'Farming, Fishing, and Forestry'), ('47-0000', 'Construction and Extraction'), ('49-0000', 'Installation, Maintenance, and Repair'), ('51-0000', 'Production'), ('53-0000', 'Transportation and Material Moving'), ('55-0000', 'Military Specific')])),
                ('industry_sector', models.CharField(null=True, blank=True, max_length=20, choices=[('NAICS 11', 'Agriculture, Forestry, Fishing and Hunting'), ('NAICS 21', 'Mining, Quarrying, and Oil and Gas Extraction'), ('NAICS 23', 'Construction'), ('NAICS 31-33', 'Manufacturing'), ('NAICS 42', 'Wholesale Trade'), ('NAICS 44-45', 'Retail Trade '), ('NAICS 48-49', 'Transportation and Warehousing'), ('NAICS 22', 'Utilities'), ('NAICS 51', 'Information'), ('NAICS 52', 'Finance and Insurance '), ('NAICS 53', 'Real Estate and Rental and Leasing '), ('NAICS 531', 'Real Estate '), ('NAICS 54', 'Professional, Scientific, and Technical Services '), ('NAICS 55', 'Management of Companies and Enterprises '), ('NAICS 56', 'Administrative and Support and Waste Management and Remediation Services'), ('NAICS 61', 'Educational Services'), ('NAICS 62', 'Health Care and Social Assistance'), ('NAICS 71', 'Arts, Entertainment, and Recreation'), ('NAICS 72', 'Accommodation and Food Services '), ('NAICS 81', 'Other Services')])),
                ('employer_type', models.IntegerField(null=True, blank=True, choices=[(0, 'For-profit business (100+ employees)'), (1, 'For-profit business (up to 100 employees)'), (2, 'For-profit business (only business owner and spouse)'), (3, 'Non-profit private organization'), (4, 'Non-profit public organization'), (5, 'Government (Local, State, Federal)')])),
                ('employer', models.CharField(null=True, blank=True, max_length=255)),
                ('politically_exposed', models.BooleanField(default=False)),
                ('student_loan', models.NullBooleanField()),
                ('student_loan_assistance_program', models.NullBooleanField(verbose_name='Assistance Program', help_text='Does your employer offer a loan repayment assistance program?')),
                ('student_loan_graduate_looking', models.NullBooleanField(verbose_name='Graduate', help_text='Are you a graduate looking to refinance your student loans?')),
                ('student_loan_parent_looking', models.NullBooleanField(verbose_name='Parent', help_text='Are you a parent looking to refinance Parent Plus loans?')),
                ('hsa_eligible', models.NullBooleanField()),
                ('hsa_provider_name', models.CharField(null=True, blank=True, max_length=255)),
                ('hsa_state', models.CharField(null=True, blank=True, max_length=255)),
                ('hsa_coverage_type', models.CharField(null=True, blank=True, max_length=32, choices=[('Single', 'Single'), ('Family', 'Family')])),
                ('smoker', models.NullBooleanField()),
                ('daily_exercise', models.PositiveIntegerField(null=True, blank=True, help_text='In Minutes')),
                ('weight', models.FloatField(null=True, blank=True, help_text='In kilograms')),
                ('height', models.FloatField(null=True, blank=True, help_text='In centimeters')),
                ('drinks', models.PositiveIntegerField(null=True, blank=True, help_text='Number of drinks per day')),
                ('betasmartz_agreement', models.BooleanField(default=False)),
                ('advisor_agreement', models.BooleanField(default=False)),
                ('agreement_time', models.PositiveIntegerField(null=True, blank=True)),
                ('agreement_ip', models.CharField(null=True, blank=True, max_length=45)),
                ('last_action', models.DateTimeField(null=True)),
                ('other_income', models.IntegerField(null=True, blank=True)),
                ('risk_score', models.FloatField(null=True, blank=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('readonly_access', models.BooleanField(default=False)),
                ('home_value', models.FloatField(null=True, blank=True)),
                ('home_growth', models.FloatField(null=True, blank=True)),
                ('ss_fra_todays', models.FloatField(null=True, blank=True)),
                ('ss_fra_retirement', models.FloatField(null=True, blank=True)),
                ('state_tax_after_credits', models.FloatField(null=True, blank=True)),
                ('state_tax_effrate', models.FloatField(null=True, blank=True)),
                ('pension_name', models.CharField(null=True, blank=True, max_length=255)),
                ('pension_amount', models.FloatField(null=True, blank=True)),
                ('pension_start_date', models.DateField(null=True, blank=True)),
                ('employee_contributions_last_year', models.FloatField(null=True, blank=True)),
                ('employer_contributions_last_year', models.FloatField(null=True, blank=True)),
                ('total_contributions_last_year', models.FloatField(null=True, blank=True)),
                ('advisor', models.ForeignKey(to='advisor.Advisor', on_delete=django.db.models.deletion.PROTECT, related_name='all_clients')),
                ('residential_address', models.ForeignKey(related_name='+', to='address.Address')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ClientAccount',
            fields=[
                ('id', models.AutoField(serialize=False, verbose_name='ID', primary_key=True, auto_created=True)),
                ('custom_fee', models.PositiveIntegerField(default=0)),
                ('account_type', models.IntegerField(choices=[(0, 'Personal Account'), (1, 'Joint Account'), (2, 'Trust Account'), (24, 'Investment Club Account'), (25, 'Partnership/Limited partnership Account'), (26, 'Sole Proprietor Account'), (27, 'Limited Liability Company Account'), (28, 'Association Account'), (29, 'Non-corporate organization Account'), (30, 'Pension Account'), (5, '401K Account'), (38, '401A Account'), (6, 'Roth 401K Account'), (7, 'Individual Retirement Account (IRA)'), (8, 'Roth IRA'), (9, 'SEP IRA'), (10, '403K Account'), (11, 'SIMPLE IRA Account (Savings Incentive Match Plans for Employees)'), (12, 'SARSEP Account (Salary Reduction Simplified Employee Pension)'), (13, 'Payroll Deduction IRA Account'), (14, 'Profit-Sharing Account'), (16, 'Money Purchase Account'), (17, 'Employee Stock Ownership Account (ESOP)'), (18, 'Governmental Account'), (19, '457 Account'), (20, '409A Nonqualified Deferred Compensation Account'), (21, '403B Account'), (31, 'Health Savings Account'), (32, '529 college savings plans Account'), (33, 'Coverdell Educational Savings Account (ESA) Account'), (34, 'UGMA/UTMA Account'), (35, 'Guardianship of the Estate Account'), (36, 'Custodial Account'), (37, 'Thrift Savings Account'), (39, 'Qualified Annuity Plan'), (40, 'Tax Deferred Annuity Plan'), (41, 'Qualified Nonprofit Plan'), (42, 'Qualified Nonprofit Roth Plan'), (43, 'Private 457 Plan'), (44, 'Individual 401k Account'), (45, 'Individual 401k Roth Account'), (46, 'Variable Annuity'), (47, 'Single Life Annuity'), (48, 'Joint & Survivor Annuity')])),
                ('account_name', models.CharField(default='PERSONAL', max_length=255)),
                ('account_number', models.CharField(null=True, blank=True, max_length=16)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('token', models.CharField(max_length=36, editable=False)),
                ('confirmed', models.BooleanField(default=False)),
                ('tax_loss_harvesting_consent', models.BooleanField(default=False)),
                ('tax_loss_harvesting_status', models.CharField(default='USER_OFF', max_length=255, choices=[('USER_OFF', 'USER_OFF'), ('USER_ON', 'USER_ON')])),
                ('cash_balance', models.FloatField(default=0, help_text='The amount of cash in this account available to be used.')),
                ('supervised', models.BooleanField(default=True, help_text='Is this account supervised by an advisor?')),
                ('status', models.IntegerField(default=0, null=True, choices=[(0, 'Open'), (1, 'Pending Close From Admin'), (2, 'Closed')])),
                ('account_group', models.ForeignKey(to='advisor.AccountGroup', null=True, related_name='accounts_all')),
                ('asset_fee_plan', models.ForeignKey(null=True, to='client.AssetFeePlan')),
                ('default_portfolio_set', models.ForeignKey(to='portfolios.PortfolioSet')),
                ('primary_owner', models.ForeignKey(related_name='primary_accounts', to='client.Client')),
                ('signatories', models.ManyToManyField(to='client.Client', blank=True, related_name='signatory_accounts', help_text='Other clients authorised to operate the account.')),
            ],
        ),
        migrations.CreateModel(
            name='CloseAccountRequest',
            fields=[
                ('id', models.AutoField(serialize=False, verbose_name='ID', primary_key=True, auto_created=True)),
                ('close_choice', models.IntegerField(null=True, choices=[(0, 'Liquidate assets'), (1, 'Transfer assets to another account'), (2, 'Transfer assets to another custodian'), (3, 'Take direct custody of your assets')])),
                ('account_transfer_form', models.FileField(null=True, blank=True, upload_to='')),
                ('account', models.ForeignKey(to='client.ClientAccount')),
            ],
        ),
        migrations.CreateModel(
            name='EmailInvite',
            fields=[
                ('id', models.AutoField(serialize=False, verbose_name='ID', primary_key=True, auto_created=True)),
                ('first_name', models.CharField(max_length=100)),
                ('middle_name', models.CharField(max_length=100, blank=True)),
                ('last_name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('invite_key', models.CharField(default=client.models.generate_token, max_length=64)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('last_sent_at', models.DateTimeField(null=True, blank=True)),
                ('send_count', models.PositiveIntegerField(default=0)),
                ('reason', models.PositiveIntegerField(null=True, blank=True, choices=[(1, 'Retirement'), (2, 'Personal Investing')])),
                ('status', models.PositiveIntegerField(default=0, choices=[(0, 'Created'), (1, 'Sent'), (2, 'Accepted'), (3, 'Expired'), (4, 'Complete')])),
                ('onboarding_data', jsonfield.fields.JSONField(null=True, blank=True)),
                ('tax_transcript', models.FileField(null=True, blank=True, upload_to='')),
                ('social_security_statement', models.FileField(null=True, blank=True, upload_to='')),
                ('partner_social_security_statement', models.FileField(null=True, blank=True, upload_to='')),
                ('photo_verification', models.FileField(null=True, blank=True, upload_to='')),
                ('access_level', models.IntegerField(default=1, choices=[(1, 'Client Full Access'), (2, 'Client Read Only Access'), (3, 'No Client Access')])),
                ('salutation', models.CharField(default='Mr.', max_length=10, choices=[('Mr.', 'Mr.'), ('Mrs.', 'Mrs.'), ('Ms.', 'Ms.'), ('Dr.', 'Dr.')])),
                ('suffix', models.CharField(null=True, blank=True, max_length=10, choices=[('Sr.', 'Sr.'), ('Jr.', 'Jr.'), ('I', 'I'), ('II', 'II'), ('III', 'III'), ('IV', 'IV'), ('V', 'V')])),
                ('risk_score', models.FloatField(null=True, blank=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('ib_account_number', models.CharField(verbose_name='Interactive Brokers Account Number', null=True, blank=True, max_length=32)),
                ('advisor', models.ForeignKey(related_name='invites', to='advisor.Advisor')),
                ('user', models.OneToOneField(to=settings.AUTH_USER_MODEL, blank=True, null=True, related_name='invitation')),
            ],
        ),
        migrations.CreateModel(
            name='EmailNotificationPrefs',
            fields=[
                ('id', models.AutoField(serialize=False, verbose_name='ID', primary_key=True, auto_created=True)),
                ('auto_deposit', models.BooleanField(verbose_name='to remind me a day before my automatic deposits will be transferred', default=True)),
                ('hit_10mln', models.BooleanField(verbose_name='when my account balance hits $10,000,000', default=False)),
                ('client', models.OneToOneField(to='client.Client', related_name='notification_prefs')),
            ],
        ),
        migrations.CreateModel(
            name='HealthDevice',
            fields=[
                ('id', models.AutoField(serialize=False, verbose_name='ID', primary_key=True, auto_created=True)),
                ('provider', models.IntegerField(null=True, help_text='Heath device provider', choices=[(1, 'Google Fit'), (2, 'Fitbit'), (3, 'Samsung Digital Health'), (4, 'Microsoft Health'), (5, 'Jawbone'), (6, 'Under Armour'), (7, 'Withings'), (8, 'TomTom'), (9, 'Garmin')])),
                ('access_token', models.CharField(default='', max_length=2000, help_text='OAuth access Token')),
                ('refresh_token', models.CharField(null=True, blank=True, max_length=1000, help_text='OAuth refresh token')),
                ('expires_at', models.DateTimeField(null=True, blank=True, help_text='OAuth token expiry time')),
                ('meta', jsonfield.fields.JSONField(null=True, blank=True, help_text='Meta data')),
                ('client', models.OneToOneField(to='client.Client', related_name='health_device', help_text='The health device owner')),
            ],
        ),
        migrations.CreateModel(
            name='IBAccount',
            fields=[
                ('id', models.AutoField(serialize=False, verbose_name='ID', primary_key=True, auto_created=True)),
                ('ib_account', models.CharField(max_length=32)),
                ('bs_account', models.OneToOneField(to='client.ClientAccount', null=True, related_name='ib_account')),
            ],
        ),
        migrations.CreateModel(
            name='IBOnboard',
            fields=[
                ('id', models.AutoField(serialize=False, verbose_name='ID', primary_key=True, auto_created=True)),
                ('account_number', models.CharField(null=True, blank=True, max_length=32, unique=True)),
                ('state', models.IntegerField(default=0, choices=[(0, 'Initialized'), (1, 'Submitted'), (2, 'Rejected'), (3, 'Active'), (4, 'Awaiting Feed')])),
                ('account_type', models.IntegerField(default=0, null=True, blank=True, choices=[(0, 'Personal Account'), (1, 'Joint Account'), (2, 'Trust Account'), (24, 'Investment Club Account'), (25, 'Partnership/Limited partnership Account'), (26, 'Sole Proprietor Account'), (27, 'Limited Liability Company Account'), (28, 'Association Account'), (29, 'Non-corporate organization Account'), (30, 'Pension Account'), (5, '401K Account'), (38, '401A Account'), (6, 'Roth 401K Account'), (7, 'Individual Retirement Account (IRA)'), (8, 'Roth IRA'), (9, 'SEP IRA'), (10, '403K Account'), (11, 'SIMPLE IRA Account (Savings Incentive Match Plans for Employees)'), (12, 'SARSEP Account (Salary Reduction Simplified Employee Pension)'), (13, 'Payroll Deduction IRA Account'), (14, 'Profit-Sharing Account'), (16, 'Money Purchase Account'), (17, 'Employee Stock Ownership Account (ESOP)'), (18, 'Governmental Account'), (19, '457 Account'), (20, '409A Nonqualified Deferred Compensation Account'), (21, '403B Account'), (31, 'Health Savings Account'), (32, '529 college savings plans Account'), (33, 'Coverdell Educational Savings Account (ESA) Account'), (34, 'UGMA/UTMA Account'), (35, 'Guardianship of the Estate Account'), (36, 'Custodial Account'), (37, 'Thrift Savings Account'), (39, 'Qualified Annuity Plan'), (40, 'Tax Deferred Annuity Plan'), (41, 'Qualified Nonprofit Plan'), (42, 'Qualified Nonprofit Roth Plan'), (43, 'Private 457 Plan'), (44, 'Individual 401k Account'), (45, 'Individual 401k Roth Account'), (46, 'Variable Annuity'), (47, 'Single Life Annuity'), (48, 'Joint & Survivor Annuity')])),
                ('ib_employment_status', models.IntegerField(verbose_name='IB Employment Status', default=0, blank=True, choices=[(0, 'EMPLOYED'), (1, 'UNEMPLOYED'), (2, 'SELFEMPLOYED'), (3, 'RETIRED'), (4, 'HOMEMAKER'), (5, 'ATHOMETRADER'), (6, 'STUDENT')], null=True, help_text='IB Employment Status')),
                ('country_of_birth', models.CharField(null=True, blank=True, max_length=250, help_text='Country of birth', choices=[('AU', 'Australia'), ('AX', 'Aland Islands'), ('AL', 'Albania'), ('DZ', 'Algeria'), ('AS', 'American Samoa'), ('AD', 'Andorra'), ('AI', 'Anguilla'), ('AQ', 'Antarctica'), ('AG', 'Antigua and Barbuda'), ('AR', 'Argentina'), ('AM', 'Armenia'), ('AW', 'Aruba'), ('AT', 'Austria'), ('AZ', 'Azerbaijan'), ('BS', 'Bahamas'), ('BH', 'Bahrain'), ('BD', 'Bangladesh'), ('BB', 'Barbados'), ('BE', 'Belgium'), ('BZ', 'Belize'), ('BJ', 'Benin'), ('BM', 'Bermuda'), ('BT', 'Bhutan'), ('BO', 'Bolivia'), ('BO', 'Bonaire, Sint Eustatius and Saba'), ('BA', 'Bosnia and Herzegovina'), ('BW', 'Botswana'), ('BR', 'Brazil'), ('IO', 'British Indian Ocean Territory'), ('VG', 'British Virgin Islands'), ('BN', 'Brunei Darussalam'), ('BG', 'Bulgaria'), ('BF', 'Burkina Faso'), ('BI', 'Burundi'), ('KH', 'Cambodia'), ('CM', 'Cameroon'), ('CA', 'Canada'), ('CV', 'Cape Verde'), ('KY', 'Cayman Islands'), ('TD', 'Chad'), ('JE', 'Channel Islands and Jersey'), ('CL', 'Chile'), ('CN', 'China'), ('CO', 'Colombia'), ('KM', 'Comoros'), ('CG', 'Congo'), ('CK', 'Cook Islands'), ('CR', 'Costa Rica'), ('HR', 'Croatia'), ('CY', 'Cyprus'), ('CZ', 'Czech Republic'), ('DK', 'Denmark'), ('DJ', 'Djibouti'), ('DM', 'Dominica'), ('DO', 'Dominican Republic'), ('EC', 'Ecuador'), ('EG', 'Egypt'), ('SV', 'El Salvador'), ('GQ', 'Equatorial Guinea'), ('ER', 'Eritrea'), ('EE', 'Estonia'), ('ET', 'Ethiopia'), ('FO', 'Faroe Islands'), ('FK', 'Falkland Islands (Malvinas)'), ('FJ', 'Fiji'), ('FI', 'Finland'), ('FR', 'France'), ('GF', 'French Guiana'), ('PF', 'French Polynesia'), ('GA', 'Gabon'), ('GM', 'Gambia'), ('GE', 'Georgia'), ('DE', 'Germany'), ('GH', 'Ghana'), ('GI', 'Gibraltar'), ('GR', 'Greece'), ('GL', 'Greenland'), ('GD', 'Grenada'), ('GP', 'Guadeloupe'), ('GU', 'Guam'), ('GT', 'Guatemala'), ('GG', 'Guernsey'), ('GN', 'Guinea'), ('GW', 'Guinea-Bissau'), ('GY', 'Guyana'), ('HT', 'Haiti'), ('VA', 'Holy See'), ('HN', 'Honduras'), ('HK', 'Hong Kong Special Administrative Region of China'), ('HU', 'Hungary'), ('IS', 'Iceland'), ('IN', 'India'), ('ID', 'Indonesia'), ('IE', 'Ireland'), ('IM', 'Isle of Man'), ('IL', 'Israel'), ('IT', 'Italy'), ('JM', 'Jamaica'), ('JP', 'Japan'), ('JO', 'Jordan'), ('KZ', 'Kazakhstan'), ('KE', 'Kenya'), ('KI', 'Kiribati'), ('KW', 'Kuwait'), ('KG', 'Kyrgyzstan'), ('LA', "Lao People'S Democratic Republic"), ('LV', 'Latvia'), ('LB', 'Lebanon'), ('LS', 'Lesotho'), ('LR', 'Liberia'), ('LI', 'Liechtenstein'), ('LT', 'Lithuania'), ('LU', 'Luxembourg'), ('MO', 'Macao Special Administrative Region of China'), ('MG', 'Madagascar'), ('MW', 'Malawi'), ('MY', 'Malaysia'), ('MV', 'Maldives'), ('ML', 'Mali'), ('MT', 'Malta'), ('MH', 'Marshall Islands'), ('MQ', 'Martinique'), ('MR', 'Mauritania'), ('MU', 'Mauritius'), ('YT', 'Mayotte'), ('MX', 'Mexico'), ('FM', 'Micronesia, Federated States of'), ('MC', 'Monaco'), ('MN', 'Mongolia'), ('ME', 'Montenegro'), ('MS', 'Montserrat'), ('MA', 'Morocco'), ('MZ', 'Mozambique'), ('NA', 'Namibia'), ('NP', 'Nepal'), ('NL', 'Netherlands'), ('AN', 'Netherlands Antilles'), ('NC', 'New Caledonia'), ('NZ', 'New Zealand'), ('NI', 'Nicaragua'), ('NE', 'Niger'), ('NU', 'Niue'), ('NF', 'Norfolk Island'), ('MP', 'Northern Mariana Islands'), ('NO', 'Norway'), ('PS', 'Occupied Palestinian Territory'), ('OM', 'Oman'), ('PK', 'Pakistan'), ('PW', 'Palau'), ('PA', 'Panama'), ('PG', 'Papua New Guinea'), ('PY', 'Paraguay'), ('PE', 'Peru'), ('PH', 'Philippines'), ('PN', 'Pitcairn'), ('PL', 'Poland'), ('PT', 'Portugal'), ('PR', 'Puerto Rico'), ('QA', 'Qatar'), ('KR', 'Republic of Korea'), ('MD', 'Republic of Moldova'), ('RE', 'Reunion'), ('RO', 'Romania'), ('RU', 'Russian Federation'), ('RW', 'Rwanda'), ('SH', 'Saint Helena'), ('KN', 'Saint Kitts and Nevis'), ('LC', 'Saint Lucia'), ('MF', 'Saint Martin'), ('PM', 'Saint Pierre and Miquelon'), ('VC', 'Saint Vincent and the Grenadines'), ('WS', 'Samoa'), ('SM', 'San Marino'), ('ST', 'Sao Tome and Principe'), ('SA', 'Saudi Arabia'), ('SN', 'Senegal'), ('RS', 'Serbia'), ('SC', 'Seychelles'), ('SG', 'Singapore'), ('SK', 'Slovakia'), ('SI', 'Slovenia'), ('SB', 'Solomon Islands'), ('ZA', 'South Africa'), ('ES', 'Spain'), ('LK', 'Sri Lanka'), ('SR', 'Suriname'), ('SJ', 'Svalbard and Jan Mayen Islands'), ('SZ', 'Swaziland'), ('SE', 'Sweden'), ('CH', 'Switzerland'), ('TW', 'Taiwan (Republic of China)'), ('TJ', 'Tajikistan'), ('TH', 'Thailand'), ('MK', 'The former Yugoslav Republic of Macedonia'), ('TG', 'Togo'), ('TK', 'Tokelau'), ('TO', 'Tonga'), ('TT', 'Trinidad and Tobago'), ('TN', 'Tunisia'), ('TR', 'Turkey'), ('TM', 'Turkmenistan'), ('TC', 'Turks and Caicos Islands'), ('TV', 'Tuvalu'), ('UG', 'Uganda'), ('UA', 'Ukraine'), ('AE', 'United Arab Emirates'), ('GB', 'United Kingdom'), ('TZ', 'United Republic of Tanzania'), ('US', 'United States'), ('VI', 'United States Virgin Islands'), ('UY', 'Uruguay'), ('UZ', 'Uzbekistan'), ('VU', 'Vanuatu'), ('VE', 'Venezuela'), ('VN', 'Viet Nam'), ('WF', 'Wallis and Futuna Islands'), ('EH', 'Western Sahara'), ('ZM', 'Zambia')])),
                ('num_dependents', models.IntegerField(verbose_name='Number of dependents', null=True, blank=True, help_text='Number of dependents')),
                ('phone_type', models.CharField(default='Home', blank=True, choices=[('Work', 'Work'), ('Home', 'Home'), ('Fax', 'Fax'), ('Mobile', 'Mobile'), ('Mobile (work)', 'Mobile (work)'), ('Mobile (other)', 'Mobile (other)'), ('Business', 'Business'), ('Other (voice)', 'Other (voice)')], null=True, max_length=32, help_text='Phone Type')),
                ('identif_leg_citizenship', models.CharField(verbose_name='Legal residence citizenship', blank=True, choices=[('AU', 'Australia'), ('AX', 'Aland Islands'), ('AL', 'Albania'), ('DZ', 'Algeria'), ('AS', 'American Samoa'), ('AD', 'Andorra'), ('AI', 'Anguilla'), ('AQ', 'Antarctica'), ('AG', 'Antigua and Barbuda'), ('AR', 'Argentina'), ('AM', 'Armenia'), ('AW', 'Aruba'), ('AT', 'Austria'), ('AZ', 'Azerbaijan'), ('BS', 'Bahamas'), ('BH', 'Bahrain'), ('BD', 'Bangladesh'), ('BB', 'Barbados'), ('BE', 'Belgium'), ('BZ', 'Belize'), ('BJ', 'Benin'), ('BM', 'Bermuda'), ('BT', 'Bhutan'), ('BO', 'Bolivia'), ('BO', 'Bonaire, Sint Eustatius and Saba'), ('BA', 'Bosnia and Herzegovina'), ('BW', 'Botswana'), ('BR', 'Brazil'), ('IO', 'British Indian Ocean Territory'), ('VG', 'British Virgin Islands'), ('BN', 'Brunei Darussalam'), ('BG', 'Bulgaria'), ('BF', 'Burkina Faso'), ('BI', 'Burundi'), ('KH', 'Cambodia'), ('CM', 'Cameroon'), ('CA', 'Canada'), ('CV', 'Cape Verde'), ('KY', 'Cayman Islands'), ('TD', 'Chad'), ('JE', 'Channel Islands and Jersey'), ('CL', 'Chile'), ('CN', 'China'), ('CO', 'Colombia'), ('KM', 'Comoros'), ('CG', 'Congo'), ('CK', 'Cook Islands'), ('CR', 'Costa Rica'), ('HR', 'Croatia'), ('CY', 'Cyprus'), ('CZ', 'Czech Republic'), ('DK', 'Denmark'), ('DJ', 'Djibouti'), ('DM', 'Dominica'), ('DO', 'Dominican Republic'), ('EC', 'Ecuador'), ('EG', 'Egypt'), ('SV', 'El Salvador'), ('GQ', 'Equatorial Guinea'), ('ER', 'Eritrea'), ('EE', 'Estonia'), ('ET', 'Ethiopia'), ('FO', 'Faroe Islands'), ('FK', 'Falkland Islands (Malvinas)'), ('FJ', 'Fiji'), ('FI', 'Finland'), ('FR', 'France'), ('GF', 'French Guiana'), ('PF', 'French Polynesia'), ('GA', 'Gabon'), ('GM', 'Gambia'), ('GE', 'Georgia'), ('DE', 'Germany'), ('GH', 'Ghana'), ('GI', 'Gibraltar'), ('GR', 'Greece'), ('GL', 'Greenland'), ('GD', 'Grenada'), ('GP', 'Guadeloupe'), ('GU', 'Guam'), ('GT', 'Guatemala'), ('GG', 'Guernsey'), ('GN', 'Guinea'), ('GW', 'Guinea-Bissau'), ('GY', 'Guyana'), ('HT', 'Haiti'), ('VA', 'Holy See'), ('HN', 'Honduras'), ('HK', 'Hong Kong Special Administrative Region of China'), ('HU', 'Hungary'), ('IS', 'Iceland'), ('IN', 'India'), ('ID', 'Indonesia'), ('IE', 'Ireland'), ('IM', 'Isle of Man'), ('IL', 'Israel'), ('IT', 'Italy'), ('JM', 'Jamaica'), ('JP', 'Japan'), ('JO', 'Jordan'), ('KZ', 'Kazakhstan'), ('KE', 'Kenya'), ('KI', 'Kiribati'), ('KW', 'Kuwait'), ('KG', 'Kyrgyzstan'), ('LA', "Lao People'S Democratic Republic"), ('LV', 'Latvia'), ('LB', 'Lebanon'), ('LS', 'Lesotho'), ('LR', 'Liberia'), ('LI', 'Liechtenstein'), ('LT', 'Lithuania'), ('LU', 'Luxembourg'), ('MO', 'Macao Special Administrative Region of China'), ('MG', 'Madagascar'), ('MW', 'Malawi'), ('MY', 'Malaysia'), ('MV', 'Maldives'), ('ML', 'Mali'), ('MT', 'Malta'), ('MH', 'Marshall Islands'), ('MQ', 'Martinique'), ('MR', 'Mauritania'), ('MU', 'Mauritius'), ('YT', 'Mayotte'), ('MX', 'Mexico'), ('FM', 'Micronesia, Federated States of'), ('MC', 'Monaco'), ('MN', 'Mongolia'), ('ME', 'Montenegro'), ('MS', 'Montserrat'), ('MA', 'Morocco'), ('MZ', 'Mozambique'), ('NA', 'Namibia'), ('NP', 'Nepal'), ('NL', 'Netherlands'), ('AN', 'Netherlands Antilles'), ('NC', 'New Caledonia'), ('NZ', 'New Zealand'), ('NI', 'Nicaragua'), ('NE', 'Niger'), ('NU', 'Niue'), ('NF', 'Norfolk Island'), ('MP', 'Northern Mariana Islands'), ('NO', 'Norway'), ('PS', 'Occupied Palestinian Territory'), ('OM', 'Oman'), ('PK', 'Pakistan'), ('PW', 'Palau'), ('PA', 'Panama'), ('PG', 'Papua New Guinea'), ('PY', 'Paraguay'), ('PE', 'Peru'), ('PH', 'Philippines'), ('PN', 'Pitcairn'), ('PL', 'Poland'), ('PT', 'Portugal'), ('PR', 'Puerto Rico'), ('QA', 'Qatar'), ('KR', 'Republic of Korea'), ('MD', 'Republic of Moldova'), ('RE', 'Reunion'), ('RO', 'Romania'), ('RU', 'Russian Federation'), ('RW', 'Rwanda'), ('SH', 'Saint Helena'), ('KN', 'Saint Kitts and Nevis'), ('LC', 'Saint Lucia'), ('MF', 'Saint Martin'), ('PM', 'Saint Pierre and Miquelon'), ('VC', 'Saint Vincent and the Grenadines'), ('WS', 'Samoa'), ('SM', 'San Marino'), ('ST', 'Sao Tome and Principe'), ('SA', 'Saudi Arabia'), ('SN', 'Senegal'), ('RS', 'Serbia'), ('SC', 'Seychelles'), ('SG', 'Singapore'), ('SK', 'Slovakia'), ('SI', 'Slovenia'), ('SB', 'Solomon Islands'), ('ZA', 'South Africa'), ('ES', 'Spain'), ('LK', 'Sri Lanka'), ('SR', 'Suriname'), ('SJ', 'Svalbard and Jan Mayen Islands'), ('SZ', 'Swaziland'), ('SE', 'Sweden'), ('CH', 'Switzerland'), ('TW', 'Taiwan (Republic of China)'), ('TJ', 'Tajikistan'), ('TH', 'Thailand'), ('MK', 'The former Yugoslav Republic of Macedonia'), ('TG', 'Togo'), ('TK', 'Tokelau'), ('TO', 'Tonga'), ('TT', 'Trinidad and Tobago'), ('TN', 'Tunisia'), ('TR', 'Turkey'), ('TM', 'Turkmenistan'), ('TC', 'Turks and Caicos Islands'), ('TV', 'Tuvalu'), ('UG', 'Uganda'), ('UA', 'Ukraine'), ('AE', 'United Arab Emirates'), ('GB', 'United Kingdom'), ('TZ', 'United Republic of Tanzania'), ('US', 'United States'), ('VI', 'United States Virgin Islands'), ('UY', 'Uruguay'), ('UZ', 'Uzbekistan'), ('VU', 'Vanuatu'), ('VE', 'Venezuela'), ('VN', 'Viet Nam'), ('WF', 'Wallis and Futuna Islands'), ('EH', 'Western Sahara'), ('ZM', 'Zambia')], null=True, max_length=250, help_text='Legal residence citizenship')),
                ('fin_info_tot_assets', models.IntegerField(verbose_name='Total Assets', null=True, blank=True, help_text='Total assets', choices=[(0, '0 ~ 19,999'), (1, '20,000 ~ 49,999'), (2, '50,000 ~ 74,999'), (3, '75,000 ~ 99,999'), (4, '100,000 ~ 249,999'), (5, '250,000 ~ 499,999'), (6, '500,000 ~ 999,999'), (7, '1,000,000 ~ 4,999,999'), (8, '5,000,000 ~ 9,999,999'), (9, '10,000,000 ~ 249,999,999'), (10, '250,000,000 ~ 499,999,999'), (11, '500,000,000 ~ ')])),
                ('fin_info_liq_net_worth', models.IntegerField(verbose_name='Liquid Net Worth', null=True, blank=True, help_text='Liquid net worth', choices=[(0, '0 ~ 19,999'), (1, '20,000 ~ 50,000'), (2, '50,001 ~ 75,000'), (3, '75,001 ~ 100,000'), (4, '100,001 ~ 250,000'), (5, '250,001 ~ 500,000'), (6, '500,001 ~ 1,000,000'), (7, '1,000,001 ~ 5,000,000'), (8, '5,000,001 ~ ')])),
                ('fin_info_ann_net_inc', models.IntegerField(verbose_name='Annual Net Income', null=True, blank=True, help_text='Annual net income', choices=[(0, '0 ~ 39,999'), (1, '40,000 ~ 45,000'), (2, '45,001 ~ 50,000'), (3, '50,001 ~ 100,000'), (4, '100,001 ~ 150,000'), (5, '150,001 ~ 250,000'), (6, '250,001 ~ 500,000'), (7, '500,001 ~ 1,000,000'), (8, '1,000,001 ~ ')])),
                ('fin_info_net_worth', models.IntegerField(verbose_name='Net Worth', null=True, blank=True, help_text='Net worth', choices=[(0, '0 ~ 19,999'), (1, '20,000 ~ 50,000'), (2, '50,001 ~ 75,000'), (3, '75,001 ~ 100,000'), (4, '100,001 ~ 250,000'), (5, '250,001 ~ 500,000'), (6, '500,001 ~ 1,000,000'), (7, '1,000,001 ~ 5,000,000'), (8, '5,000,001 ~ 10,000,000'), (9, '10,000,001 ~ 25,000,000'), (10, '25,000,001 ~ 30,000,000'), (11, '30,000,001 ~ 50,000,000'), (12, '50,000,001 ~ ')])),
                ('asset_exp_0_knowledge', models.IntegerField(verbose_name='STK trading knowledge', null=True, blank=True, help_text='STK trading knowledge')),
                ('asset_exp_0_yrs', models.IntegerField(verbose_name='STK trading experience', null=True, blank=True, help_text='STK trading experience')),
                ('asset_exp_0_trds_per_yr', models.IntegerField(verbose_name='STK trading frequency', null=True, blank=True, help_text='STK trading frequency')),
                ('asset_exp_1_knowledge', models.IntegerField(verbose_name='FUNDS trading knowledge', null=True, blank=True, help_text='FUNDS trading knowledge')),
                ('asset_exp_1_yrs', models.IntegerField(verbose_name='FUNDS trading experience', null=True, blank=True, help_text='FUNDS trading experience')),
                ('asset_exp_1_trds_per_yr', models.IntegerField(verbose_name='Fund Trades Per Year', null=True, blank=True, help_text='FUNDS trading frequency')),
                ('reg_status_broker_deal', models.NullBooleanField(verbose_name='BROKERDEALER', help_text='BROKERDEALER')),
                ('reg_status_exch_memb', models.NullBooleanField(verbose_name='EXCHANGEMEMBERSHIP', help_text='EXCHANGEMEMBERSHIP')),
                ('reg_status_disp', models.NullBooleanField(verbose_name='DISPUTE', help_text='DISPUTE')),
                ('reg_status_investig', models.NullBooleanField(verbose_name='Investigation', help_text='INVESTIGATION')),
                ('reg_status_stk_cont', models.IntegerField(null=True, blank=True, help_text='STKCONTROL', choices=[(1, 'A Director'), (2, 'A 10% Shareholder'), (3, 'A Policy-Making Officer')])),
                ('tax_resid_0_tin_type', models.CharField(verbose_name='Tax residency TIN type', default='SSN', blank=True, choices=[('SSN', 'SSN'), ('EIN', 'EIN'), ('NonUS_NationalIID', 'NonUS_NationalIID')], null=True, max_length=250, help_text='Tax residency TIN type')),
                ('tax_resid_0_tin', models.CharField(verbose_name='Tax residency TIN', null=True, blank=True, max_length=250, help_text='Tax residency TIN')),
                ('doc_exec_ts', models.DateTimeField(null=True, auto_now_add=True)),
                ('doc_exec_login_ts', models.DateTimeField(null=True, auto_now_add=True)),
                ('signature', models.CharField(verbose_name='Document signed by', null=True, blank=True, max_length=250, help_text='Document signed by')),
                ('salutation', models.CharField(default='Mr.', max_length=10, help_text='Salutation', choices=[('Mr.', 'Mr.'), ('Mrs.', 'Mrs.'), ('Ms.', 'Ms.'), ('Dr.', 'Dr.')])),
                ('suffix', models.CharField(null=True, blank=True, max_length=10, help_text='Suffix', choices=[('Sr.', 'Sr.'), ('Jr.', 'Jr.'), ('I', 'I'), ('II', 'II'), ('III', 'III'), ('IV', 'IV'), ('V', 'V')])),
                ('other_income_source', models.IntegerField(default=3, null=True, blank=True, choices=[(0, 'Consulting'), (1, 'Disability'), (2, 'Inheritance'), (3, 'Interest'), (4, 'Real Estate'), (5, 'Rental'), (6, 'Severance'), (7, 'Spouse'), (8, 'Trading and Investments'), (9, 'Unemployment'), (10, 'Other')])),
                ('client', models.OneToOneField(to='client.Client', blank=True, null=True, related_name='ib_onboard')),
                ('employer_address', models.OneToOneField(to='address.Address', blank=True, null=True, related_name='ib_onboard_employer')),
                ('tax_address', models.OneToOneField(to='address.Address', blank=True, null=True, related_name='ib_onboard_tax')),
            ],
        ),
        migrations.CreateModel(
            name='JointAccountConfirmationModel',
            fields=[
                ('id', models.AutoField(serialize=False, verbose_name='ID', primary_key=True, auto_created=True)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_confirmed', models.DateTimeField(null=True, blank=True)),
                ('token', models.CharField(max_length=64)),
                ('account', models.ForeignKey(related_name='joint_confirmation', to='client.ClientAccount')),
                ('cosignee', models.ForeignKey(related_name='cosignee_confirmation', to='client.Client')),
                ('primary_owner', models.ForeignKey(related_name='owner_confirmation', to='client.Client')),
            ],
        ),
        migrations.CreateModel(
            name='RiskCategory',
            fields=[
                ('id', models.AutoField(serialize=False, verbose_name='ID', primary_key=True, auto_created=True)),
                ('name', models.CharField(max_length=64, unique=True)),
                ('upper_bound', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
            ],
            options={
                'verbose_name': 'Risk Category',
                'ordering': ['upper_bound'],
                'verbose_name_plural': 'Risk Categories',
            },
        ),
        migrations.CreateModel(
            name='RiskProfileAnswer',
            fields=[
                ('id', models.AutoField(serialize=False, verbose_name='ID', primary_key=True, auto_created=True)),
                ('order', models.IntegerField()),
                ('text', models.TextField()),
                ('image', models.ImageField(verbose_name='answer_image', null=True, blank=True, upload_to='')),
                ('b_score', models.FloatField(help_text='Indication of Behaviour towards risk. Higher means higher risk is idealogically acceptable.')),
                ('a_score', models.FloatField(help_text='Indication of Ability to take risk. Higher means losses due to risk has less critical impact on the investor')),
                ('s_score', models.FloatField(help_text='Indication of Investor sophistication. Higher means investor understands risk and investment matters.')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='RiskProfileGroup',
            fields=[
                ('id', models.AutoField(serialize=False, verbose_name='ID', primary_key=True, auto_created=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(null=True, blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='RiskProfileQuestion',
            fields=[
                ('id', models.AutoField(serialize=False, verbose_name='ID', primary_key=True, auto_created=True)),
                ('order', models.IntegerField()),
                ('text', models.TextField()),
                ('explanation', models.TextField()),
                ('image', models.ImageField(verbose_name='question_image', null=True, blank=True, upload_to='')),
                ('figure', models.TextField(null=True, blank=True)),
                ('group', models.ForeignKey(related_name='questions', to='client.RiskProfileGroup')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.AddField(
            model_name='riskprofileanswer',
            name='question',
            field=models.ForeignKey(related_name='answers', to='client.RiskProfileQuestion'),
        ),
        migrations.AddField(
            model_name='client',
            name='risk_profile_group',
            field=models.ForeignKey(to='client.RiskProfileGroup', null=True, related_name='clients'),
        ),
        migrations.AddField(
            model_name='client',
            name='risk_profile_responses',
            field=models.ManyToManyField(to='client.RiskProfileAnswer'),
        ),
        migrations.AddField(
            model_name='client',
            name='secondary_advisors',
            field=models.ManyToManyField(to='advisor.Advisor', editable=False, related_name='secondary_clients'),
        ),
        migrations.AddField(
            model_name='client',
            name='user',
            field=models.OneToOneField(to=settings.AUTH_USER_MODEL, related_name='client'),
        ),
        migrations.AddField(
            model_name='assetfee',
            name='plan',
            field=models.ForeignKey(to='client.AssetFeePlan'),
        ),
        migrations.AddField(
            model_name='apexaccount',
            name='bs_account',
            field=models.OneToOneField(to='client.ClientAccount', null=True, related_name='apex_account'),
        ),
        migrations.AddField(
            model_name='accounttyperiskprofilegroup',
            name='risk_profile_group',
            field=models.ForeignKey(related_name='account_types', to='client.RiskProfileGroup'),
        ),
        migrations.AddField(
            model_name='accountbeneficiary',
            name='account',
            field=models.ForeignKey(to='client.ClientAccount'),
        ),
        migrations.AlterUniqueTogether(
            name='riskprofilequestion',
            unique_together=set([('group', 'order')]),
        ),
        migrations.AlterUniqueTogether(
            name='riskprofileanswer',
            unique_together=set([('question', 'order')]),
        ),
        migrations.AlterUniqueTogether(
            name='emailinvite',
            unique_together=set([('advisor', 'email')]),
        ),
        migrations.AlterUniqueTogether(
            name='clientaccount',
            unique_together=set([('primary_owner', 'account_name')]),
        ),
    ]
