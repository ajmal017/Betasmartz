# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import migrations, models
import django.core.validators
import jsonfield.fields
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('eventlog', '0003_auto_20160111_0208'),
        ('client', '0003_auto_20170515_1146'),
        ('goal', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='RetirementAdvice',
            fields=[
                ('id', models.AutoField(auto_created=True, verbose_name='ID', serialize=False, primary_key=True)),
                ('dt', models.DateTimeField(auto_now_add=True)),
                ('read', models.DateTimeField(blank=True, null=True)),
                ('text', models.CharField(max_length=512)),
                ('actions', jsonfield.fields.JSONField(blank=True, help_text='List of actions [{label, type/url, data},...]', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='RetirementLifestyle',
            fields=[
                ('id', models.AutoField(auto_created=True, verbose_name='ID', serialize=False, primary_key=True)),
                ('cost', models.PositiveIntegerField(help_text="The minimum expected cost in system currency of this lifestyle in today's dollars")),
                ('holidays', models.TextField(help_text='The text for the holidays block')),
                ('eating_out', models.TextField(help_text='The text for the eating out block')),
                ('health', models.TextField(help_text='The text for the health block')),
                ('interests', models.TextField(help_text='The text for the interests block')),
                ('leisure', models.TextField(help_text='The text for the leisure block')),
                ('default_volunteer_days', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(7)], help_text='The default number of volunteer work days selected for this lifestyle')),
                ('default_paid_days', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(7)], help_text='The default number of paid work days selected for this lifestyle')),
            ],
        ),
        migrations.CreateModel(
            name='RetirementPlan',
            fields=[
                ('id', models.AutoField(auto_created=True, verbose_name='ID', serialize=False, primary_key=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(blank=True, max_length=128, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('lifestyle', models.PositiveIntegerField(default=1, choices=[(1, 'Doing OK'), (2, 'Comfortable'), (3, 'Doing Well'), (4, 'Luxury')], help_text='The desired retirement lifestyle')),
                ('desired_income', models.PositiveIntegerField(help_text='The desired annual household pre-tax retirement income in system currency')),
                ('income', models.PositiveIntegerField(help_text='The current annual personal pre-tax income at the start of your plan')),
                ('volunteer_days', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(7)], help_text='The number of volunteer work days selected')),
                ('paid_days', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(7)], help_text='The number of paid work days selected')),
                ('same_home', models.BooleanField(help_text='Will you be retiring in the same home?')),
                ('same_location', models.NullBooleanField(help_text='Will you be retiring in the same general location?')),
                ('retirement_postal_code', models.CharField(validators=[django.core.validators.MinLengthValidator(5), django.core.validators.MaxLengthValidator(10)], max_length=10, help_text='What postal code will you retire in?')),
                ('reverse_mortgage', models.BooleanField(help_text='Would you consider a reverse mortgage? (optional)')),
                ('retirement_home_style', models.PositiveIntegerField(blank=True, help_text='The style of your retirement home', choices=[(1, 'Single, Detached'), (2, 'Single, Attached'), (3, 'Multi-Unit, 9 or less'), (4, 'Multi-Unit, 10 - 20'), (5, 'Multi-Unit, 20+'), (6, 'Mobile Home'), (7, 'RV, Van, Boat, etc')], null=True)),
                ('retirement_home_price', models.PositiveIntegerField(blank=True, help_text="The price of your future retirement home (in today's dollars)", null=True)),
                ('beta_partner', models.BooleanField(default=False, help_text="Will BetaSmartz manage your partner's retirement assets as well?")),
                ('retirement_accounts', jsonfield.fields.JSONField(blank=True, help_text='List of retirement accounts [{id, name, acc_type, owner, balance, balance_efdt, contrib_amt, contrib_period, employer_match, employer_match_type},...]', null=True)),
                ('expenses', jsonfield.fields.JSONField(blank=True, help_text='List of expenses [{id, desc, cat, who, amt},...]', null=True)),
                ('savings', jsonfield.fields.JSONField(blank=True, help_text='List of savings [{id, desc, cat, who, amt},...]', null=True)),
                ('initial_deposits', jsonfield.fields.JSONField(blank=True, help_text='List of deposits [{id, asset, goal, amt},...]', null=True)),
                ('income_growth', models.FloatField(default=0, help_text='Above consumer price index (inflation)')),
                ('expected_return_confidence', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], help_text='Planned confidence of the portfolio returns given the volatility and risk predictions.')),
                ('retirement_age', models.PositiveIntegerField()),
                ('btc', models.PositiveIntegerField(blank=True, help_text='Annual personal before-tax contributions')),
                ('atc', models.PositiveIntegerField(blank=True, help_text='Annual personal after-tax contributions')),
                ('max_employer_match_percent', models.FloatField(blank=True, help_text='The percent the employer matches of before-tax contributions', null=True)),
                ('desired_risk', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], help_text='The selected risk appetite for this retirement plan')),
                ('recommended_risk', models.FloatField(blank=True, editable=False, help_text='The calculated recommended risk for this retirement plan', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('max_risk', models.FloatField(blank=True, editable=False, help_text='The maximum allowable risk appetite for this retirement plan, based on our risk model', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('calculated_life_expectancy', models.PositiveIntegerField(editable=False, blank=True)),
                ('selected_life_expectancy', models.PositiveIntegerField()),
                ('agreed_on', models.DateTimeField(blank=True, null=True)),
                ('partner_data', jsonfield.fields.JSONField(blank=True, null=True)),
                ('balance', models.FloatField(blank=True, null=True)),
                ('date_of_estimate', models.DateField(blank=True, null=True)),
                ('client', models.ForeignKey(to='client.Client')),
                ('goal_setting', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, null=True, related_name='retirement_plan', to='goal.GoalSetting')),
                ('partner_plan', models.OneToOneField(on_delete=django.db.models.deletion.SET_NULL, null=True, related_name='partner_plan_reverse', to='retiresmartz.RetirementPlan')),
            ],
        ),
        migrations.CreateModel(
            name='RetirementPlanAccount',
            fields=[
                ('id', models.AutoField(auto_created=True, verbose_name='ID', serialize=False, primary_key=True)),
                ('account', models.OneToOneField(related_name='retirement', to='client.ClientAccount')),
                ('plan', models.ForeignKey(to='retiresmartz.RetirementPlan', related_name='retiree')),
            ],
        ),
        migrations.CreateModel(
            name='RetirementPlanEinc',
            fields=[
                ('id', models.AutoField(auto_created=True, verbose_name='ID', serialize=False, primary_key=True)),
                ('begin_date', models.DateField()),
                ('amount', models.FloatField()),
                ('growth', models.FloatField(help_text='Daily rate to increase or decrease the amount by as of the begin_date. 0.0 for no modelled change')),
                ('schedule', models.TextField(help_text='RRULE to specify when the transfer happens')),
                ('name', models.CharField(max_length=128)),
                ('account_type', models.IntegerField(blank=True, choices=[(0, 'Personal Account'), (1, 'Joint Account'), (2, 'Trust Account'), (24, 'Investment Club Account'), (25, 'Partnership/Limited partnership Account'), (26, 'Sole Proprietor Account'), (27, 'Limited Liability Company Account'), (28, 'Association Account'), (29, 'Non-corporate organization Account'), (30, 'Pension Account'), (5, '401K Account'), (38, '401A Account'), (6, 'Roth 401K Account'), (7, 'Individual Retirement Account (IRA)'), (8, 'Roth IRA'), (9, 'SEP IRA'), (10, '403K Account'), (11, 'SIMPLE IRA Account (Savings Incentive Match Plans for Employees)'), (12, 'SARSEP Account (Salary Reduction Simplified Employee Pension)'), (13, 'Payroll Deduction IRA Account'), (14, 'Profit-Sharing Account'), (16, 'Money Purchase Account'), (17, 'Employee Stock Ownership Account (ESOP)'), (18, 'Governmental Account'), (19, '457 Account'), (20, '409A Nonqualified Deferred Compensation Account'), (21, '403B Account'), (31, 'Health Savings Account'), (32, '529 college savings plans Account'), (33, 'Coverdell Educational Savings Account (ESA) Account'), (34, 'UGMA/UTMA Account'), (35, 'Guardianship of the Estate Account'), (36, 'Custodial Account'), (37, 'Thrift Savings Account'), (39, 'Qualified Annuity Plan'), (40, 'Tax Deferred Annuity Plan'), (41, 'Qualified Nonprofit Plan'), (42, 'Qualified Nonprofit Roth Plan'), (43, 'Private 457 Plan'), (44, 'Individual 401k Account'), (45, 'Individual 401k Roth Account'), (46, 'Variable Annuity'), (47, 'Single Life Annuity'), (48, 'Joint & Survivor Annuity')], null=True)),
                ('plan', models.ForeignKey(to='retiresmartz.RetirementPlan', related_name='external_income')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RetirementProjection',
            fields=[
                ('id', models.AutoField(auto_created=True, verbose_name='ID', serialize=False, primary_key=True)),
                ('proj_data', jsonfield.fields.JSONField(blank=True, help_text='Calculated Projection data for api response', null=True)),
                ('on_track', models.BooleanField(default=False, help_text='Whether the retirement plan is on track')),
                ('income_actual_monthly', jsonfield.fields.JSONField(blank=True, help_text='List of monthly actual income', null=True)),
                ('income_desired_monthly', jsonfield.fields.JSONField(blank=True, help_text='List of monthly desired income', null=True)),
                ('taxable_assets_monthly', jsonfield.fields.JSONField(blank=True, help_text='List of monthly taxable assets', null=True)),
                ('nontaxable_assets_monthly', jsonfield.fields.JSONField(blank=True, help_text='List of monthly nontaxable assets', null=True)),
                ('proj_balance_at_retire_in_todays', models.FloatField(default=0, null=True, help_text="Projected balance at retirement in today's money")),
                ('proj_inc_actual_at_retire_in_todays', models.FloatField(default=0, null=True, help_text="Projected monthly income actual at retirement in today's money")),
                ('proj_inc_desired_at_retire_in_todays', models.FloatField(default=0, null=True, help_text="Projected monthly income desired at retirement in today's money")),
                ('savings_end_date_as_age', models.FloatField(default=0, null=True, help_text='Projected age post retirement when taxable assets first deplete to zero')),
                ('current_percent_soc_sec', models.FloatField(default=0, null=True, help_text='Current percentage of monthly income represented by payments made towards social security')),
                ('current_percent_medicare', models.FloatField(default=0, null=True, help_text='Current percentage of monthly income represented by payments made towards medicare')),
                ('current_percent_fed_tax', models.FloatField(default=0, null=True, help_text='Current percentage of monthly income represented by payments made towards federal taxes')),
                ('current_percent_state_tax', models.FloatField(default=0, null=True, help_text='Current percentage of monthly income represented by payments made towards state taxes')),
                ('non_taxable_inc', jsonfield.fields.JSONField(blank=True, help_text='List of annual non taxable monthly income received', null=True)),
                ('tot_taxable_dist', jsonfield.fields.JSONField(blank=True, help_text='List of annual total taxable distributions received', null=True)),
                ('annuity_payments', jsonfield.fields.JSONField(blank=True, help_text='List of ammual annuity payments received', null=True)),
                ('pension_payments', jsonfield.fields.JSONField(blank=True, help_text='List of annual pension payments received', null=True)),
                ('ret_working_inc', jsonfield.fields.JSONField(blank=True, help_text='List of annual retirement working payments received', null=True)),
                ('soc_sec_benefit', jsonfield.fields.JSONField(blank=True, help_text='List of annual social security benefit payments received', null=True)),
                ('taxable_accounts', jsonfield.fields.JSONField(blank=True, help_text='List of annual taxable accounts', null=True)),
                ('non_taxable_accounts', jsonfield.fields.JSONField(blank=True, help_text='List of annual nontaxable accounts', null=True)),
                ('list_of_account_balances', jsonfield.fields.JSONField(blank=True, help_text='List of annual accounts', null=True)),
                ('reverse_mort', models.BooleanField(default=False, help_text='Whether user has a reverse mortgage')),
                ('house_value', models.FloatField(default=0, null=True, help_text='Current value of house')),
                ('house_value_at_retire_in_todays', models.FloatField(default=0, null=True, help_text='Future value of house in todays')),
                ('reverse_mort_pymnt_at_retire_in_todays', models.FloatField(default=0, null=True, help_text='Future value of monthly reverse mortgage payment in todays')),
                ('part_income_actual_monthly', jsonfield.fields.JSONField(blank=True, help_text='List of monthly actual income', null=True)),
                ('part_income_desired_monthly', jsonfield.fields.JSONField(blank=True, help_text='List of monthly desired income', null=True)),
                ('part_taxable_assets_monthly', jsonfield.fields.JSONField(blank=True, help_text='List of monthly taxable assets', null=True)),
                ('part_nontaxable_assets_monthly', jsonfield.fields.JSONField(blank=True, help_text='List of monthly nontaxable assets', null=True)),
                ('part_proj_balance_at_retire_in_todays', models.FloatField(default=0, null=True, help_text="Projected balance at retirement in today's money")),
                ('part_proj_inc_actual_at_retire_in_todays', models.FloatField(default=0, null=True, help_text="Projected monthly income actual at retirement in today's money")),
                ('part_proj_inc_desired_at_retire_in_todays', models.FloatField(default=0, null=True, help_text="Projected monthly income desired at retirement in today's money")),
                ('part_savings_end_date_as_age', models.FloatField(default=0, null=True, help_text='Projected age post retirement when taxable assets first deplete to zero')),
                ('part_current_percent_soc_sec', models.FloatField(default=0, null=True, help_text='Current percentage of monthly income represented by payments made towards social security')),
                ('part_current_percent_medicare', models.FloatField(default=0, null=True, help_text='Current percentage of monthly income represented by payments made towards medicare')),
                ('part_current_percent_fed_tax', models.FloatField(default=0, null=True, help_text='Current percentage of monthly income represented by payments made towards federal taxes')),
                ('part_current_percent_state_tax', models.FloatField(default=0, null=True, help_text='Current percentage of monthly income represented by payments made towards state taxes')),
                ('part_non_taxable_inc', jsonfield.fields.JSONField(blank=True, help_text='List of annual non taxable monthly income received', null=True)),
                ('part_tot_taxable_dist', jsonfield.fields.JSONField(blank=True, help_text='List of annual total taxable distributions received', null=True)),
                ('part_annuity_payments', jsonfield.fields.JSONField(blank=True, help_text='List of annual annuity payments received', null=True)),
                ('part_pension_payments', jsonfield.fields.JSONField(blank=True, help_text='List of annual pension payments received', null=True)),
                ('part_ret_working_inc', jsonfield.fields.JSONField(blank=True, help_text='List of annual retirement working payments received', null=True)),
                ('part_soc_sec_benefit', jsonfield.fields.JSONField(blank=True, help_text='List of annual social security benefit payments received', null=True)),
                ('part_taxable_accounts', jsonfield.fields.JSONField(blank=True, help_text='List of annual taxable accounts', null=True)),
                ('part_non_taxable_accounts', jsonfield.fields.JSONField(blank=True, help_text='List of annual nontaxable accounts', null=True)),
                ('part_list_of_account_balances', jsonfield.fields.JSONField(blank=True, help_text='List of annual accounts', null=True)),
                ('part_house_value', models.FloatField(default=0, null=True, help_text='Current value of house')),
                ('part_house_value_at_retire_in_todays', models.FloatField(default=0, null=True, help_text='Future value of house in todays')),
                ('part_reverse_mort_pymnt_at_retire_in_todays', models.FloatField(default=0, null=True, help_text='Future value of monthly reverse mortgage payment in todays')),
                ('plan', models.OneToOneField(null=True, related_name='projection', to='retiresmartz.RetirementPlan')),
            ],
        ),
        migrations.CreateModel(
            name='RetirementSpendingGoal',
            fields=[
                ('id', models.AutoField(auto_created=True, verbose_name='ID', serialize=False, primary_key=True)),
                ('goal', models.OneToOneField(related_name='retirement_plan', to='goal.Goal')),
                ('plan', models.ForeignKey(to='retiresmartz.RetirementPlan', related_name='retirement_goals')),
            ],
        ),
        migrations.AddField(
            model_name='retirementadvice',
            name='plan',
            field=models.ForeignKey(to='retiresmartz.RetirementPlan', related_name='advice'),
        ),
        migrations.AddField(
            model_name='retirementadvice',
            name='trigger',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='advice', to='eventlog.Log'),
        ),
        migrations.AlterUniqueTogether(
            name='retirementplan',
            unique_together=set([('name', 'client')]),
        ),
    ]
